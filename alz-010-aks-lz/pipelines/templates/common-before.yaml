# PER PROJECT / REPO UPDATES REQUIRED: NONE

parameters:
  adoServiceConnection: ''

steps:

#================================================================================================
# Key Vault
#================================================================================================

# Add the ado agent ip to the key vault.
- task: AzureCLI@2
  displayName: keyvault - Whitelist
  condition: eq(variables['keyvaultWhitelist'], 'true')
  inputs:
    azureSubscription: ${{ parameters['adoServiceConnection'] }}
    scriptType: bash
    scriptLocation: inlineScript
    failOnStandardError: true
    inlineScript: |
      echo "############################"
      echo "Adding Agent IP To Key Vault"
      echo "############################"
      export HOST_IP="$(curl -s ifconfig.me)"
      echo "IP OF AGENT IS: $HOST_IP"
      echo "Key Vault Name: $(keyvaultName)"
      echo "Switching To Management Subscription (mana_nonprod_01) ..."
      az account set --subscription $(keyvaultSubscription)
      az keyvault network-rule add --name $(keyvaultName) --ip-address $HOST_IP --subscription $(keyvaultSubscription)

#================================================================================================
# Terraform State
#================================================================================================

# Add the ado agent ip to the terraform state storage account.
- task: AzureCLI@2
  displayName: tfstate - Whitelist
  condition: eq(variables['tfstateWhitelist'], 'true')
  inputs:
    azureSubscription: ${{ parameters['adoServiceConnection'] }}
    scriptType: bash
    scriptLocation: inlineScript
    failOnStandardError: false
    inlineScript: |
      echo "##################################"
      echo "Adding Agent IP To Storage Account"
      echo "##################################"
      export HOST_IP="$(curl -s ifconfig.me)"
      echo "IP OF AGENT IS: $HOST_IP"
      echo "Resource Group: $(tfstateResourceGroup)"
      echo "Storage Account: $(tfstateStorageAccount)"
      echo "Switching To Management Subscription (mana_nonprod_01) ..."
      az account set --subscription $(tfstateSubscription)
      echo "Updating Storage Account Firewall ..."
      az storage account update --default-action Allow --resource-group $(tfstateResourceGroup) --name $(tfstateStorageAccount)
      echo "Waiting For Firewall Rule To Propagate ..."
      sleep 30
      echo "Starting Connectivity Tests ..."
      startTime=$(date)
      while [ true ]
      do
        status=$(az storage container list --auth-mode login --account-name "$(tfstateStorageAccount)")
        echo "Showing Rule Has Been Set ..."
        az storage account show -n $(tfstateStorageAccount) --query networkRuleSet
        echo "Testing Storage Account Connectivity, This May Take A Few Attempts, Please Wait ..."
        sleep 10
        if [ "$status" ]; then
          echo "Whitelisting Successful :-)"
          break
        fi
        if [ $(date +%s) -ge $(date -d "${startTime} 5 minutes" +%s) ]; then
          echo "Whitelisting Failed :-("
          break
        fi
      done

#================================================================================================
# Set Service Principal Environment Variables For Terraform
#================================================================================================

# Set arm variables.
- task: AzureCLI@2
  displayName: Set ARM Variables
  inputs:
    azureSubscription: ${{ parameters['adoServiceConnection'] }}
    scriptType: bash
    scriptLocation: inlineScript
    failOnStandardError: true
    addSpnToEnvironment: true
    inlineScript: |
      echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$servicePrincipalId"
      echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]$servicePrincipalKey"
      echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(subscriptionId)"
      echo "##vso[task.setvariable variable=ARM_TENANT_ID]$tenantId"
