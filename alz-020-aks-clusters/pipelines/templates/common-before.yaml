# PER PROJECT / REPO UPDATES REQUIRED: NONE

parameters:
  adoServiceConnection: ''

steps:

#================================================================================================
# Key Vault
#================================================================================================

# Add the ado agent ip to the key vault if it exists.
- task: AzureCLI@2
  displayName: keyvault - Whitelist
  condition: eq(variables['keyvaultWhitelist'], 'true')
  inputs:
    azureSubscription: ${{ parameters['adoServiceConnection'] }}
    scriptType: bash
    scriptLocation: inlineScript
    failOnStandardError: true
    inlineScript: |
      echo "############################"
      echo "Adding Agent IP To Key Vault"
      echo "############################"
      echo "Key Vault Name: $(keyvaultName)"
      echo "Switching To Key Vault Subscription ..."
      az account set --subscription $(keyvaultSubscription)
      if az keyvault show --name $(keyvaultName) --query "name" --output tsv &>/dev/null; then
        echo "Key vault exists, adding agent ip to network rules ..."
        export HOST_IP="$(curl -s ifconfig.me)"
        echo "IP OF AGENT IS: $HOST_IP"
        az keyvault network-rule add --name $(keyvaultName) --ip-address $HOST_IP --subscription $(keyvaultSubscription) 2>&1 | grep -v "overlaps with" || true
      else
        echo "Key vault does not exist, skipping ip whitelisting ..."
      fi

# Inject the ado agent ip into the tfvars file so we can manage secrets.
- task: Bash@3
  displayName: keyvault - Inject IP to Tfvars
  condition: eq(variables['keyvaultWhitelist'], 'true')
  inputs:
    targetType: inline
    script: |
      echo "############################"
      echo "Injecting ADO IP into Tfvars"
      echo "############################"
      AGENT_IP=$(curl -s ifconfig.me)
      echo "Agent IP: $AGENT_IP"
      TFVARS_FILE="environments/$(environment)/$(region)/$(environment)-$(region)-$(cluster).tfvars"
      echo "Updating: $TFVARS_FILE"
      sed -i.bak -E "s|(ip_rules[[:space:]]*=[[:space:]]*\[)([^]]*)\]|\1\2, \"${AGENT_IP}/32\"]|" "$TFVARS_FILE"
      echo "Updated tfvars:"
      cat "$TFVARS_FILE"

#================================================================================================
# Terraform State
#================================================================================================

# Add the ado agent ip to the terraform state storage account.
- task: AzureCLI@2
  displayName: tfstate - Whitelist
  condition: eq(variables['tfstateWhitelist'], 'true')
  inputs:
    azureSubscription: ${{ parameters['adoServiceConnection'] }}
    scriptType: bash
    scriptLocation: inlineScript
    failOnStandardError: false
    inlineScript: |
      echo "##################################"
      echo "Adding Agent IP To Storage Account"
      echo "##################################"
      export HOST_IP="$(curl -s ifconfig.me)"
      echo "IP OF AGENT IS: $HOST_IP"
      echo "Resource Group: $(tfstateResourceGroup)"
      echo "Storage Account: $(tfstateStorageAccount)"
      echo "Switching To Management Subscription (mana_nonprod_01) ..."
      az account set --subscription $(tfstateSubscription)
      echo "Updating Storage Account Firewall ..."
      az storage account update --default-action Allow --resource-group $(tfstateResourceGroup) --name $(tfstateStorageAccount)
      echo "Waiting For Firewall Rule To Propagate ..."
      sleep 30
      echo "Starting Connectivity Tests ..."
      startTime=$(date)
      while [ true ]
      do
        status=$(az storage container list --auth-mode login --account-name "$(tfstateStorageAccount)")
        echo "Showing Rule Has Been Set ..."
        az storage account show -n $(tfstateStorageAccount) --query networkRuleSet
        echo "Testing Storage Account Connectivity, This May Take A Few Attempts, Please Wait ..."
        sleep 10
        if [ "$status" ]; then
          echo "Whitelisting Successful :-)"
          break
        fi
        if [ $(date +%s) -ge $(date -d "${startTime} 5 minutes" +%s) ]; then
          echo "Whitelisting Failed :-("
          break
        fi
      done

#================================================================================================
# Set Service Principal Environment Variables For Terraform
#================================================================================================

# Set arm variables.
- task: AzureCLI@2
  displayName: Set ARM Variables
  inputs:
    azureSubscription: ${{ parameters['adoServiceConnection'] }}
    scriptType: bash
    scriptLocation: inlineScript
    failOnStandardError: true
    addSpnToEnvironment: true
    inlineScript: |
      echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$servicePrincipalId"
      echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]$servicePrincipalKey"
      echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(subscriptionId)"
      echo "##vso[task.setvariable variable=ARM_TENANT_ID]$tenantId"
