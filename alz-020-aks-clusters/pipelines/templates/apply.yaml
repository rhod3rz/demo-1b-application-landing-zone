# PER PROJECT / REPO UPDATES REQUIRED: NONE

parameters:
  fullEnvironment: '' # e.g. nonprod_nteu
  useManagedDevopsPool: ''
  vmImageName: ''
  devopsPoolName: ''
  adoServiceConnection: ''

stages:

#================================================================================================
# Terraform Init & Plan Stage
#================================================================================================

- stage: ${{ parameters.fullEnvironment }}_plan

  jobs:

    - job: terraformInitPlan
      displayName: Init & Plan

      ${{ if eq(parameters.useManagedDevopsPool, false) }}:
        pool:
          vmImage: ${{ parameters.vmImageName }}
      ${{ else }}:
        pool:
          name: ${{ parameters.devopsPoolName }}

      steps:

      # Run before tasks.
      - template: common-before.yaml
        parameters:
          adoServiceConnection: ${{ parameters['adoServiceConnection'] }}

      # Run init & plan tasks.
      - template: common-init-plan.yaml

      # Run after tasks.
      - template: common-after.yaml
        parameters:
          adoServiceConnection: ${{ parameters['adoServiceConnection'] }}

#================================================================================================
# Test Stage
#================================================================================================

- stage: ${{ parameters.fullEnvironment }}_test
  dependsOn: ${{ parameters.fullEnvironment }}_plan
  condition: succeeded()

  jobs:

    - job: Test
      displayName: Test

      ${{ if eq(parameters.useManagedDevopsPool, false) }}:
        pool:
          vmImage: ${{ parameters.vmImageName }}
      ${{ else }}:
        pool:
          name: ${{ parameters.devopsPoolName }}

      steps:

      # Run tests.
      - template: common-test.yaml

#================================================================================================
# Check for DESTROY Changes
#================================================================================================

- stage: ${{ parameters.fullEnvironment }}_checkDestroy
  dependsOn: ${{ parameters.fullEnvironment }}_test
  condition: and(succeeded(), eq(dependencies.${{ parameters.fullEnvironment }}_plan.outputs['terraformInitPlan.plan.destroyWarning'], 'true'))

  jobs:

    - job: checkDestroy
      displayName: Check For Destroy
      pool: 'server'
      timeoutInMinutes: 4320

      steps:

      # Manual step to approve the terraform plan.
      - task: ManualValidation@1
        displayName: TF - Manual Validation
        inputs:
          notifyUsers: 'first.last@rhod3rz.com'
          instructions: '⚠️ The plan contains DESTROY; double check before proceeding!'
          onTimeout: 'reject'

#================================================================================================
# Terraform Apply
#================================================================================================

- stage: ${{ parameters.fullEnvironment }}_apply
  dependsOn: ${{ parameters.fullEnvironment }}_checkDestroy
  condition: and(or(succeeded(), eq(dependencies.${{ parameters.fullEnvironment }}_checkDestroy.result, 'skipped')), eq(dependencies.${{ parameters.fullEnvironment }}_plan.outputs['terraformInitPlan.plan.planChanged'], 'true'))

  jobs:

    - deployment: Apply
      displayName: Apply

      ${{ if eq(parameters.useManagedDevopsPool, false) }}:
        pool:
          vmImage: ${{ parameters.vmImageName }}
      ${{ else }}:
        pool:
          name: ${{ parameters.devopsPoolName }}

      environment: "$(tfstateContainerName)-$(environment)-$(region)-$(cluster)"

      strategy:
        runOnce:
          deploy:

            steps:

            # Download repo & as it's not automatic for a deployment.
            - checkout: self
              displayName: Checkout Repo

            # Run before tasks.
            - template: common-before.yaml
              parameters:
                adoServiceConnection: ${{ parameters['adoServiceConnection'] }}

            # Install specific version of terraform.
            - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@1
              displayName: TF - Install
              inputs:
                terraformVersion: $(terraformVersion)

            # Run terraform init.
            - script: |
                cp $(Agent.BuildDirectory)/$(environment)-$(region)-$(cluster)-terraform-lock-file/.terraform.lock.hcl $(Build.SourcesDirectory)
                tree -a
                terraform init -reconfigure \
                  -backend-config="resource_group_name=$(tfstateResourceGroup)" \
                  -backend-config="storage_account_name=$(tfstateStorageAccount)" \
                  -backend-config="container_name=$(tfstateContainerName)" \
                  -backend-config="key=$(tfstateKey)" \
                  -backend-config="use_azuread_auth=true"
              displayName: TF - Init

            # Run terraform apply.
            - script: |
                # az login only needed for null_resource acr seeding from 030-avm-res-containerregistry-registry.tf.
                az login --service-principal --username $ARM_CLIENT_ID --password $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
                # 1 - took this out as tfplan doesnt contain the current ado agent ip; if creating secrets in a firewalled kv, this is not an option.
                # terraform apply -input=false $(Agent.BuildDirectory)/$(environment)-$(region)-$(cluster)-tfplan/$(environment)-$(region)-$(cluster)-tfplan
                # 2 - instead we will use the tfvar direct; not the tfplan from the plan stage.
                terraform apply -var-file="environments/$(environment)/$(region)/$(environment)-$(region)-$(cluster).tfvars" -auto-approve
              displayName: TF - Apply

            # Run after tasks.
            - template: common-after.yaml
              parameters:
                adoServiceConnection: ${{ parameters['adoServiceConnection'] }}
